{"version":3,"sources":["components/MyContext.js","components/searchBox.js","components/dateEditeur.js","components/traductionMeteo.js","components/resultBox.js","components/geolocalisation.js","App.js","reportWebVitals.js","index.js"],"names":["defaultContext","query","setQuery","result","setResult","UserContext","React","createContext","api","process","SearchBox","useContext","className","id","type","placeholder","onChange","event","target","value","onKeyPress","key","fetch","then","dataJson","a","json","catch","console","error","editeurDate","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","traductionMeteo","ResultBox","name","sys","country","Date","Math","round","main","temp","weather","description","GeoLocalisation","api2","document","getElementById","onClick","response","data","city","focus","App","useState","contextValue","Provider","message","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bd79bae4.chunk.js","sourcesContent":["import React from 'react';\n\nconst defaultContext ={   \n    query: \"\",\n    setQuery: () => {},\n    result:{},    \n    setResult: () => {},\n};\n\nexport const UserContext=React.createContext(defaultContext)","import React, { useContext } from 'react';\nimport { UserContext } from './MyContext';\n\nconst api = {\n\tkey : process.env.REACT_APP_TOKEN,\n\tbase :\"https://api.openweathermap.org/data/2.5/\"\n  }\n\nfunction SearchBox () {  \n    \n    const {query}=useContext(UserContext)\n    const {setQuery}=useContext(UserContext)   \n    const {setResult}=useContext(UserContext)\n\n    /*recherche fait dans l'input*/\n\tconst search = event =>{\n\t\tif (event.key === \"Enter\"){\n\t\t\tfetch(`${api.base}weather?q=${query}&units=metric&appid=${api.key}&lang=fr`)\n\t\t\t.then(async (dataJson) => {\t\t\t\t\t\t\t\n\t\t\t\tsetResult(await dataJson.json()\t)\t\t\t\t\t\n\t\t\t\tsetQuery('')\t\t\t\t\t\n\t\t\t})\t\t\t\t\n\t\t\t.catch(console.error)\n\t\t}\t\n\t}\t\n    \n    return(        \n\n        <div className=\"search-box\" >\n                <input\n                    id=\"query\"\n                    type=\"text\"\n                    className=\"search-bar\"\n                    placeholder=\" Nom de la commune...\"\n                    onChange={event => setQuery(event.target.value)}\n                    value={query}\n                    onKeyPress={search}\n                />     \n        </div>\n    )      \n}\n\nexport default SearchBox","/*edite la date au format Jour Numéro Mois Année*/\nconst editeurDate = (d) => {\n    let months = ['Janvier','Février','Mars','Avril','Mai','Juin',\n'Juillet','Août','Septembre','Octobre','Novembre','Décembre']\n    let days = ['Lundi','Mardi','Mercredi','Jeudi','Vendredi','Samedi','Dimanche']\n\n    let day=days[d.getDay()]\n    let date=d.getDate()\n    let month=months[d.getMonth()]\n    let year=d.getFullYear()\n\n    return `${day} ${date} ${month} ${year}`\n}\nexport default editeurDate","/*traduction des conditions météos de l'anglais vers le français*/\n\nconst traductionMeteo = (key) =>{\n    switch (key) {\n        case 'Rain':\n            return 'Pluie'\t\t\t\n            \n        case 'Thunderstorm':\n            return 'Orage'\t\t\t\t\n            \n        case 'Drizzle':\n            return 'Bruine'\t\t\t\t\n            \n        case 'Snow':\n            return 'Neige'\n\n        case 'Atmosphere':\n        return 'Climat'\n\n        case 'Clear':\n        return 'Soleil'\n\n        case 'Clouds':\n        return 'Nuages'\n            \n        default:\t\t\t\t\n            break;\n    }\n}\n\nexport default traductionMeteo","import React, { useContext } from 'react';\nimport { UserContext } from './MyContext';\nimport editeurDate from './dateEditeur';\nimport traductionMeteo from './traductionMeteo';\n\nfunction ResultBox () {\n\n    const {result}=useContext(UserContext)\n\t\n    return(\n\t\t<div className=\"textReponse\">\n\t\t\t <div className=\"location\">\n\t\t\t\t{result.name} {result.sys.country}\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t</div>\t\n\t\t\t<div className=\"date\">\n\t\t\t\t{editeurDate(new Date())}\n\t\t\t</div>\t\t\t\n\t\t\t<div className=\"température\">\n\t\t\t\t{Math.round(result.main.temp)}°c\n\t\t\t</div>\n\t\t\t<div className=\"weather\">\n\t\t\t{traductionMeteo(result.weather[0].main)} : {result.weather[0].description}\t\t\t\t\t\t\t\n\t\t\t</div>\t\t\t\n\t\t</div>       \n    )    \n}\n\nexport default ResultBox","import React, { useContext } from 'react';\nimport { UserContext } from './MyContext';\n\nfunction GeoLocalisation () {   \n    \n    const {setQuery}=useContext(UserContext)   \n\n    const api2 = {\n        key : process.env.REACT_APP_TOKEN2,\n        base :'https://geolocation-db.com/json/'\n      }      \n        \n    let query=document.getElementById('query')\n\n    const localise = ()=>{\n        fetch(`${api2.base}${api2.key}`)\n        \n        .then((response)=>response.json())\n        .then(async(data)=>{ \n            setQuery(data.city)\n            query.focus()\n        })        \n        .catch (console.error)  \n    }\n\n            \n    return(\n        <div>\n            <button\n                onClick={localise}>\n                Position\n            </button>\n            \n        </div>\n    )\n}\n\nexport default GeoLocalisation","import React, { useState } from 'react';\nimport { UserContext } from './components/MyContext';\nimport SearchBox from './components/searchBox'\nimport ResultBox from './components/resultBox'\nimport GeoLocalisation from './components/geolocalisation'\n\nfunction App() {\n\n\t/* requête du nom de la ville */\n\tconst [query, setQuery] = useState ('')\n\n\t/*stocke le résultat de la requête*/\n\tconst [result, setResult] = useState ({})\t\n\n\tconst contextValue = {\n\t\tquery,setQuery,\n\t\tresult,setResult\t\n\t  };\t\n\n  return (\n    <div className={\n\t\t(typeof result.weather !=\"undefined\") \n\t\t?  result.weather[0].main\n\t\t:'intro'}>\t\t\n\n\t\t<UserContext.Provider value={contextValue}>\n     \t<main>\t\n\t\t\t<GeoLocalisation></GeoLocalisation>\n\t\t\t<SearchBox></SearchBox>\t\t\t\n\n\t\t\t{(typeof result.main !=\"undefined\") \n\t\t\t\t? (<ResultBox></ResultBox>)\n\t\t\t\t: ('') \n\t\t\t}\n\t\t\t\n\t\t\t<div className=\"textErreur\">\n\t\t\t\t{result.message &&\n\t\t\t\t\t<div>\t\t\t\t\n\t\t\t\t\t\tLa commune n'existe pas ou elle est mal orthographiée ...\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t</div>\t\t\n\t\t\t\n     \t</main>\n\t  \t</UserContext.Provider>\n    </div>  \n  )\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src/dist/css/index.min.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nreportWebVitals();\n"],"sourceRoot":""}